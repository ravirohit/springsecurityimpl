==============
About:
-> we have implemented spring 5 and hibernate 5
-> database: mysql work bench 6.3
-> we are creating Spring REST mvc application without use of spring-config.xml and web.xml file implementation.
-> Concept we have implemented: 
-> implemented file-upload testing

-------------------- Link ---------------
-> https://www.javainterviewpoint.com/spring-security-custom-login/
-> custom daoimpl: https://www.baeldung.com/spring-security-authentication-with-a-database
-> http://javainsimpleway.com/spring-security-using-custom-authentication-provider/

---------------- api link --------------------
http://localhost:8080/springsecurityimpl/customLogin.html  // has register.. login .. and file upload implementation all in one page.
http://localhost:8080/springsecurityimpl/index.html       // will be accessible only if we login to the login page
http://localhost:8080/springsecurityimpl/api/admin         // will be accessible only if we login to the login page
http://localhost:8080/springsecurityimpl/api/welcome      // will be accessible from browser event without login to the login page
http://localhost:8080/springsecurityimpl/api/login        // to implement custom login page
http://localhost:8080/springsecurityimpl/api/logout       // to implement custom logout functionality

--------------------- Steps of learning spring security ---------------------------
-> create a sample for spring security with inmemory design -> create some secure rest api and unsecure api ->try to access it from browser, for un
   secure api, it will be accessible and for secure api it will redirect to the login page(which is provided by spring it self) and after login we 
   can access the secure api based on role -> we can call logout api also which is provided by spring itself we don't have to create this api. when we 
   call logout api(<localhost:8080/project-name/logout>), again spring will redirect the page to the login screen.
-> Once above all steps are working fine, then we will create few ui page. now we will try to access ui page as well as REST api. we will observe, we are 
   only able to access REST api only but not able to access the GUI page(not found).
   Solution: we will create a prefix for the REST api call. here it is /api/* by create application.properties file in resources folder. and put the 
             same prefix in the file SpringMvcInitializer.java for servlet mapping.
    Now all the api call with "/api" in the url will go through dispatcherServlet and map to REST api. and without url without /api will be used for the
    GUI page:
    Example for URL:
    for GUI:  http://localhost:8080/<project_name>/myhomepage.html
    for REST: http://localhost:880/<project_name>/api/register
-> implement a custom login page: we will create a custom login page like here: customLogin.html and one REST api /login which will be redirecting the 
                                  incoming call to customLogin.html page. even submit button of customLogin.html will be calling to /api/login api.
   -> also update the same login api in the SecurityConfig.java configure(HttpSecurity http) method for custom formLogin URL. So whenever we will access
      to the secure api, spring fw will redirect call to .../api/login api which will redirect call to the customLogin.html page and once we will
      provide right credential, then the call will go the the secure api which we were accessing.
   -> if we will directly open the customLogin.html page and provide the right credential, then next it will open the home page(index.html)
-> implementation of logout button: here we will create a /logout api where we will delete session and redirect the api call to login page as below:
                       @RequestMapping(value="/logout", method=RequestMethod.GET)  
					    public void logoutPage(HttpServletRequest request, HttpServletResponse response) throws IOException {  
					        Authentication auth = SecurityContextHolder.getContext().getAuthentication();  
					        if (auth != null){      
					           new SecurityContextLogoutHandler().logout(request, response, auth);  
					        }  
					         //return "redirect:/";
					        response.sendRedirect("/springsecurityimpl/customLogin.html");
					     }  
-> implementation of authentication using database instead inmemory:
                                                     -> created a CustomUser.java entity class which implements UserDetails interface. just to make sure, CustomUser.java Entity class
      has needed member variable which was needed by spring security fw.
   -> Create a class CustomAuthenticationProvider.java implementing Spring interface AuthenticationProvider as done in this project;
   -> Create a class CustomUserService.java which implements UserDetailsService interface as done here. This is used by CustomAuthenticationProvider.java
      to fetch the user details from the database. we are implementing  UserDetailsService to this class just to make sure, CustomUser.java Entity class
      has needed member variable which was needed by spring security fw. As, return type should be of type UserDetails or class which implements it.
   -> Most important thing is to register our custom CustomAuthenticationProvider to the Spring AuthenticationManagerBuilder which is done in the file
      SecurityConfig.java
   -> NOTE: don't forget to add entity class(CustomUser.java) in the DbConfiguration.java, so that this class will be scanned for treated as Entity class.
   -> AuthenticationProvider: An AuthenticationProvider is an abstraction for fetching user information from a specific repository (like a database, 
                              LDAP, custom third party source, etc. ). It uses the fetched user information to validate the supplied credentials.
                -> when multiple authentication providers are defined, the providers will be queried in the order they’re declared.
    
    
    
- 

------------------ Annotation Used ---------------
@RestController, @Controller, @ResponseBody, @PathParam, @RequestParam,
@ResponseStatus, @ExceptionHandler
@ComponentScans(value = { 
      @ComponentScan("com.boraji.tutorial.spring.dao"),
      @ComponentScan("com.boraji.tutorial.spring.service") 
    })
====================== Q&A ================================
Q) what is difference between traditional Spring MVC controller and the RESTful web service controller?
Ans: he traditional MVC controller relies on the View technology, the RESTful web service controller simply returns the object and the object data is 
     written directly to the HTTP response as JSON/XML. 
   -> only difference is how the response will be sending to the client from server which was in old architecture:
      Requests are processed by the Controller and the response is returned to the DispatcherServlet which then dispatches to the view. 
Q) @Controller vs @ResponseBody vs. @RestController
Ans:  @ResponseBody: for some particular controller method, if we want to return data directly from the controller, without looking for a view, 
             using the @ResponseBody annotation on a method will do this. 
          -> Spring converts the return value and writes it to the HTTP response automatically. Each method in the Controller class must be annotated with 
             @ResponseBody.
      @RestController: now even if want to implement REST MVC architecture, still we have to use @ResponseBody on each method of the controller. which is simplified 
             by the use of @RestController. Meaning, instead of declaring @ResponseBody for each method we can provide only one annotation @RestController
             instead of @Controller on class level and it will work fine.
          -> This feature is available from spring version 4.0
Q) what is difference between @ModelAttribute and @RequestBody in spring mvc. 
Hint: for fileupload with other info in request payload @ModelAttribute worked while @RequestBody doesn't .
          
          
================= SpringSecurity =========
-> Note: in the applcation, either of the file(WebServletConfiguration.java or SpringMvcInitializer.java) will fulfill the purpose of web.xml file.
         So any one at a time can be enabled and it will work fine. 
-> in Spring, security is implemented using DelegatingFilterProxy. To register it, with spring container in Java configuration, you shall use 
   AbstractSecurityWebApplicationInitializer.
-> The spring will detect the instance of this class during application startup, and register the DelegatingFilterProxy to use the 
   springSecurityFilterChain before any other registered Filter. It also register a ContextLoaderListener.
   Code: 
		public class SpringSecurityInitializer extends AbstractSecurityWebApplicationInitializer {
		    //no code needed
		}

------------------ Q&A ------------------
Q) GUI file is coming as NOT FOUND in the browser in the spring v5 REST application without using any xml file(like web.xml or spring configuration xml file). 
  Stackoverflow link: https://stackoverflow.com/questions/56343959/gui-file-is-coming-as-not-found-in-the-browser-in-the-spring-v5-rest-application
  Code which impact the mapping for the Dispatcher servlet:
    public class SpringMvcInitializer 
	extends AbstractAnnotationConfigDispatcherServletInitializer {
	
	    @Override
	    protected Class<?>[] getRootConfigClasses() {
	        return new Class[] { SecurityConfig.class, DbConfiguration.class };
	    }
	
	    @Override
	    protected Class<?>[] getServletConfigClasses() {
	        return null;
	    }
	
	    @Override
	    protected String[] getServletMappings() {
	        return new String[] { "/" };
	    }
	
	}
Ans: I thought, instead of "/" i was trying to use "/rest" which is class level requestMapping for the controller in the getServletMappings(). So that url
   without containing "rest" will not go though dispatcherServlet and serve the request for the UI pages and URL containing "/rest" will be mapped for the
   controller method. But it didn't work.
   After many hit and try i finally got the solution: What i tried is, I have created a prefix for the incoming URL. and using this prefix string in the 
   getServletMappings() method. Now if i will try to access the controller resource using this prefix string in the URL, it will work fine and in the same way
   if i will use the URL for the UI pages without without using prefix string it will also worked fine.
   -> Way to add prefix in the URL:
   -> add application.properties file in the resources folder with content where "/api/*" is prefix string.
      server.contextPath=/api/*
   -> Now if we are having a URL "http:localhost:8080/project_name/register_api" for the controller, then this URL will become  
         "http://localhost:8080/project_name/api/register_api"
   -> and URL for the UI page index.html is:
         "http://localhost:8080/project_name/index.html"

Q) How can we provide custom login page?
Ans:  http.authorizeRequests()
          ...
          .and().formLogin().loginPage("/api/login")   // in this api we are redirecting the call to the customLogin.html page.
          
Q) for custom login page implementation, after login, i am getting a forbidden response from the server. How to login using custom login implementation?
Ans: https://www.javainterviewpoint.com/spring-security-custom-login/
   -> create a rest api which would be accepting the "/api/login" api call
   -> in this rest api, redirect the incoming call to the customLogin.html page which will ask user to login to get access the secure site.
   -> once user provide the right credential, automatically spring will redirect user to the secure page which he wanted to access or to the home page if he is
     directly accessing through the login page.
   -> Somehow making call to login api "/api/login" from the customLogin.html page, it doesn't call the api while it is taken care by spring itself. 
      login page url: 
               http://localhost:8080/springsecurityimpl/customLogin.html
      it check the credential from inmemory and if it is alright, it will redirect to the home page: 
                http://localhost:8080/springsecurityimpl/
      if credential is wrong it will be redirected to the api:
                http://localhost:8080/springsecurityimpl/api/login?error
      if this error redirect page is not defined at the server then finally earlier page will be appear to the user:
                http://localhost:8080/springsecurityimpl/customLogin.html
                
Q) How can we logout our session in Spring security?
Ans: In normal term, if we will call /logout call, then spring itself consider user want to logout the session. and by default it will redirect the page to the
   login page after clearing the session.
   code example:
         http.authorizeRequests()
             ...
             .and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout"))   // this one is used in the this application. and here after logout
		     .invalidateHttpSession(true);                                                // page will redirect to login page by default.
		       -- OR --
		  //...
			.logout()
			.logoutSuccessUrl("/afterlogout.html")                 // this can be login page also.. so use "/login" which will be taken care by spring itself.
		  //...

Q) how to create a custom Spring-based UserDetailsService backed by persistent data.
Ans: https://www.baeldung.com/spring-security-authentication-with-a-database

Q) Caused by: org.hibernate.AnnotationException: Use of @OneToMany or @ManyToMany targeting an unmapped class: com.learn.repository.User.authorities
Ans: reason: we have not added entity class where to be scanned.

Q) exception is org.hibernate.HibernateException: Could not obtain transaction-synchronized Session for current thread.
Ans: this is because i have not added @Transactional as class repository level.

Q) As we know, Spring @ComponentScan, @Autowired and @Component annotation are enough for the bean component to be managed by spring. So what is use of
   @Bean annotation and when to use to.
Ans: i beleive, if we have to inject the bean with autowired in than case, the bean should must have no-paramerized constructor. if the bean class is 
   having parameterized constructor in that case, we can't inject directly with @Autowired. So what we can do is we can inject the bean using @Bean 
   annotation.
Q) How to handle multiple configuration class in spring?
Ans: there is two ways:
   one solution: import all the configuration class on top of one configuration class and add this class in SpringMvcInitializer.java
                 Example: @Import({DbConfiguration.class})        // done in SecurityConfig.java
   Solution two: create all the configuration class add them individually in the file SpringMvcInitializer.java as it takes array of class.
   
==================== Learning ---------------
RestTemplate: it is template provided by spring to make a rest api call.
    Example: 
        ResponseEntity<String> exchange = resttemplate.exchange(url, HttpMethod.GET, null, String.class);
        String body = exchange.getBody();
-> UUID.randomUUID().toString();	
-> to check how long it takes to process request:
   long time = System.currentTimeMillis();
   chain.doFilter(request,response);
   long delta = System.currentTimeMillis();
   System.out.println("time take to process the request:"+(delta - time));
   
   long

        
             